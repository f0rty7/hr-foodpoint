# PRODUCT REQUIREMENTS DOCUMENT (PRD)
## Food Delivery Ordering System

### Document Information
- **Version**: 1.0
- **Date**: December 2024
- **Project**: Food Delivery Platform
- **Backend Framework**: Encore.ts
- **Database**: MongoDB
- **Author**: Development Team

---

## 1. EXECUTIVE SUMMARY

### 1.1 Product Overview
The Food Delivery Ordering System is a comprehensive platform that connects customers with restaurants and delivery partners. The system facilitates seamless food ordering, payment processing, order tracking, and delivery management through a robust backend infrastructure built with Encore.ts and MongoDB.

### 1.2 Key Objectives
- Enable customers to browse restaurants and place food orders
- Provide restaurants with order management and inventory control
- Facilitate delivery partner coordination and tracking
- Ensure secure payment processing and transaction management
- Deliver real-time order status updates and notifications

---

## 2. TARGET AUDIENCE

### 2.1 Primary Users
- **Customers**: Individuals ordering food for delivery
- **Restaurants**: Food establishments offering delivery services
- **Delivery Partners**: Drivers/couriers handling food delivery
- **System Administrators**: Platform management and support

### 2.2 User Personas
- **Busy Professional**: Quick meal ordering during work hours
- **Family Households**: Large orders for family meals
- **Restaurant Owner**: Managing menu, orders, and inventory
- **Delivery Driver**: Efficient order pickup and delivery

---

## 3. PRODUCT FEATURES & REQUIREMENTS

### 3.1 Core Features

#### 3.1.1 User Management System
- **User Registration & Authentication**
  - Email/phone number registration
  - Social media login integration
  - JWT-based authentication with Encore.ts auth handlers
  - Role-based access control (Customer, Restaurant, Driver, Admin)

- **Profile Management**
  - Personal information management
  - Address book for delivery locations
  - Payment method management
  - Order history and preferences

#### 3.1.2 Restaurant Management
- **Restaurant Registration & Onboarding**
  - Business verification and documentation
  - Restaurant profile setup (name, address, cuisine type)
  - Operating hours and delivery radius configuration

- **Menu Management**
  - Digital menu creation and management
  - Category-based food item organization
  - Real-time price and availability updates
  - Promotional offers and discounts

- **Order Management**
  - Real-time order notifications
  - Order acceptance/rejection workflow
  - Preparation time estimation
  - Order status updates

#### 3.1.3 Customer Ordering System
- **Restaurant Discovery**
  - Location-based restaurant search
  - Cuisine type filtering
  - Rating and review-based sorting
  - Restaurant availability status

- **Menu Browsing & Ordering**
  - Interactive menu display
  - Item customization options
  - Shopping cart management
  - Order summary and checkout

- **Order Tracking**
  - Real-time order status updates
  - Estimated delivery time
  - Live delivery tracking
  - Delivery confirmation

#### 3.1.4 Delivery Management
- **Delivery Partner System**
  - Driver registration and verification
  - Real-time location tracking
  - Order assignment algorithms
  - Earnings and performance tracking

- **Logistics & Routing**
  - Optimal route calculation
  - Multi-order batching
  - Traffic and weather considerations
  - Delivery time optimization

#### 3.1.5 Payment System
- **Payment Processing**
  - Multiple payment method support
  - Secure payment gateway integration
  - Order total calculation (items + tax + delivery)
  - Refund and cancellation handling

- **Financial Management**
  - Transaction history
  - Commission calculations
  - Payout management for restaurants and drivers
  - Financial reporting and analytics

### 3.2 Technical Requirements

#### 3.2.1 Backend Architecture (Encore.ts)
The system will be built using Encore.ts microservices architecture with the following service structure:

```
/food-delivery-app
├── encore.app
├── user/                    // User management service
│   ├── encore.service.ts
│   ├── auth.ts
│   └── profile.ts
├── restaurant/              // Restaurant management service
│   ├── encore.service.ts
│   ├── menu.ts
│   └── management.ts
├── order/                   // Order processing service
│   ├── encore.service.ts
│   ├── order.ts
│   └── tracking.ts
├── delivery/                // Delivery management service
│   ├── encore.service.ts
│   ├── driver.ts
│   └── routing.ts
├── payment/                 // Payment processing service
│   ├── encore.service.ts
│   └── payment.ts
└── notification/            // Notification service
    ├── encore.service.ts
    └── notification.ts
```

- **API Design**
  - RESTful API principles
  - Type-safe endpoints with TypeScript interfaces
  - Comprehensive error handling using Encore.ts APIError
  - Request validation and sanitization
  - Rate limiting and security measures

#### 3.2.2 Database Design (MongoDB)

Since Encore.ts natively supports PostgreSQL, MongoDB integration will be implemented using external database connection patterns as described in Encore documentation.

**MongoDB Collections Structure:**

**Users Collection:**
```javascript
{
  _id: ObjectId,
  email: String,
  phone: String,
  password: String, // hashed
  role: String, // 'customer', 'restaurant', 'driver', 'admin'
  profile: {
    firstName: String,
    lastName: String,
    avatar: String,
    addresses: [{
      type: String, // 'home', 'work', 'other'
      street: String,
      city: String,
      state: String,
      zipCode: String,
      coordinates: {
        lat: Number,
        lng: Number
      }
    }],
    paymentMethods: [{
      type: String, // 'card', 'wallet', 'upi'
      details: Object,
      isDefault: Boolean
    }]
  },
  preferences: {
    cuisineTypes: [String],
    dietaryRestrictions: [String],
    notifications: Object
  },
  createdAt: Date,
  updatedAt: Date
}
```

**Restaurants Collection:**
```javascript
{
  _id: ObjectId,
  ownerId: ObjectId, // Reference to Users
  name: String,
  description: String,
  cuisineType: [String],
  address: {
    street: String,
    city: String,
    state: String,
    zipCode: String,
    coordinates: {
      lat: Number,
      lng: Number
    }
  },
  contact: {
    phone: String,
    email: String
  },
  operatingHours: [{
    day: String,
    openTime: String,
    closeTime: String,
    isOpen: Boolean
  }],
  deliveryRadius: Number,
  minimumOrder: Number,
  deliveryFee: Number,
  rating: {
    average: Number,
    count: Number
  },
  status: String, // 'active', 'inactive', 'suspended'
  menu: [{
    category: String,
    items: [{
      _id: ObjectId,
      name: String,
      description: String,
      price: Number,
      image: String,
      isAvailable: Boolean,
      customizations: [{
        name: String,
        options: [{
          name: String,
          price: Number
        }]
      }],
      nutritionalInfo: Object,
      tags: [String]
    }]
  }],
  createdAt: Date,
  updatedAt: Date
}
```

**Orders Collection:**
```javascript
{
  _id: ObjectId,
  orderNumber: String,
  customerId: ObjectId,
  restaurantId: ObjectId,
  driverId: ObjectId,
  items: [{
    menuItemId: ObjectId,
    name: String,
    price: Number,
    quantity: Number,
    customizations: Object,
    specialInstructions: String
  }],
  pricing: {
    subtotal: Number,
    tax: Number,
    deliveryFee: Number,
    discount: Number,
    total: Number
  },
  deliveryAddress: Object,
  status: String, // 'placed', 'confirmed', 'preparing', 'ready', 'picked_up', 'delivered', 'cancelled'
  statusHistory: [{
    status: String,
    timestamp: Date,
    notes: String
  }],
  estimatedDeliveryTime: Date,
  actualDeliveryTime: Date,
  paymentStatus: String,
  paymentMethod: Object,
  specialInstructions: String,
  rating: {
    food: Number,
    delivery: Number,
    overall: Number,
    comment: String
  },
  createdAt: Date,
  updatedAt: Date
}
```

#### 3.2.3 External Integrations
- **Payment Gateways**: Stripe, PayPal, or local payment processors
- **Maps & Geolocation**: Google Maps API for routing and location services
- **SMS/Email Services**: Twilio, SendGrid for notifications
- **Push Notifications**: Firebase Cloud Messaging
- **Image Storage**: Cloudinary or AWS S3 for menu item images

#### 3.2.4 Real-time Features
- **WebSocket Implementation**: Using Encore.ts streaming APIs
- **Real-time Order Tracking**: Live location updates
- **Push Notifications**: Order status changes
- **Live Chat Support**: Customer service integration

---

## 4. API SPECIFICATIONS

### 4.1 Authentication Service
```typescript
// User registration
POST /user/register
{
  email: string,
  phone: string,
  password: string,
  role: 'customer' | 'restaurant' | 'driver'
}

// User login
POST /user/login
{
  email: string,
  password: string
}

// Token refresh
POST /user/refresh-token
{
  refreshToken: string
}
```

### 4.2 Restaurant Service
```typescript
// Get restaurants by location
GET /restaurant/search?lat={lat}&lng={lng}&radius={radius}

// Get restaurant details
GET /restaurant/{restaurantId}

// Get restaurant menu
GET /restaurant/{restaurantId}/menu

// Update menu item availability (Restaurant only)
PUT /restaurant/menu/item/{itemId}
{
  isAvailable: boolean
}
```

### 4.3 Order Service
```typescript
// Place new order
POST /order/place
{
  restaurantId: string,
  items: OrderItem[],
  deliveryAddress: Address,
  paymentMethod: PaymentMethod,
  specialInstructions?: string
}

// Get order details
GET /order/{orderId}

// Update order status (Restaurant/Driver only)
PUT /order/{orderId}/status
{
  status: OrderStatus,
  notes?: string
}
```

### 4.4 Delivery Service
```typescript
// Get available orders for drivers
GET /delivery/available-orders?driverId={driverId}

// Accept delivery order
POST /delivery/accept-order
{
  orderId: string,
  driverId: string
}

// Update driver location
PUT /delivery/location
{
  driverId: string,
  location: {
    lat: number,
    lng: number
  }
}
```

### 4.5 Payment Service
```typescript
// Process payment
POST /payment/process
{
  orderId: string,
  paymentMethod: PaymentMethod,
  amount: number
}

// Handle refund
POST /payment/refund
{
  orderId: string,
  amount: number,
  reason: string
}
```

---

## 5. TECHNICAL IMPLEMENTATION

### 5.1 MongoDB Integration with Encore.ts

Based on Encore documentation, external databases like MongoDB can be integrated using the connection pattern for non-PostgreSQL databases:

```typescript
// Database connection setup
import { MongoClient, Db } from 'mongodb';
import { secret } from 'encore.dev/config';

const mongoUri = secret('MONGODB_URI');
let db: Db;

async function connectToMongoDB(): Promise<Db> {
  if (!db) {
    const client = new MongoClient(mongoUri());
    await client.connect();
    db = client.db('food_delivery');
  }
  return db;
}

// Service implementation
import { Service } from "encore.dev/service";
export default new Service("user");
```

### 5.2 Authentication Implementation
```typescript
import { authHandler, Header, Gateway } from "encore.dev/api";
import { APIError } from "encore.dev/api";

interface AuthParams {
  authorization: Header<"Authorization">;
}

interface AuthData {
  userId: string;
  role: string;
}

export const auth = authHandler<AuthParams, AuthData>(
  async (params) => {
    const token = params.authorization?.replace('Bearer ', '');
    if (!token) {
      throw APIError.unauthenticated("Missing authorization token");
    }
    
    // Verify JWT token and extract user data
    const userData = await verifyJWTToken(token);
    return {
      userId: userData.userId,
      role: userData.role
    };
  }
);

export const gateway = new Gateway({
  authHandler: auth,
});
```

---

## 6. DEVELOPMENT PHASES

### Phase 1: MVP (Months 1-3)
- Basic user registration and authentication
- Restaurant listing and menu display
- Simple order placement and tracking
- Basic payment processing
- Core Encore.ts services setup
- MongoDB integration

### Phase 2: Enhanced Features (Months 4-6)
- Real-time order tracking
- Driver management system
- Advanced search and filtering
- Push notifications
- Rating and review system
- Analytics dashboard

### Phase 3: Advanced Features (Months 7-9)
- AI-powered recommendations
- Advanced analytics and reporting
- Multi-language support
- Advanced promotions and discounts
- Customer loyalty programs

### Phase 4: Scale & Optimize (Months 10-12)
- Performance optimization
- Advanced caching strategies
- Machine learning for logistics
- International expansion features

---

## 7. TECHNICAL CONSIDERATIONS

### 7.1 Performance Requirements
- **Response Time**: API responses under 200ms for 95% of requests
- **Throughput**: Handle 10,000+ concurrent users
- **Availability**: 99.9% uptime
- **Scalability**: Auto-scaling based on demand

### 7.2 Security Requirements
- **Data Encryption**: TLS 1.2+ for data in transit
- **Authentication**: JWT tokens with refresh mechanism
- **Authorization**: Role-based access control
- **Input Validation**: Comprehensive request validation
- **Rate Limiting**: Protect against abuse and DDoS

### 7.3 Database Considerations
- **MongoDB Integration**: External connection handling as Encore.ts natively supports PostgreSQL
- **Data Modeling**: NoSQL document structure for flexible menu management
- **Indexing Strategy**: Geospatial indexes for location-based queries
- **Backup Strategy**: Regular automated backups

---

## 8. TESTING STRATEGY

### 8.1 Testing Types
- **Unit Testing**: Individual service and function testing
- **Integration Testing**: Service-to-service communication
- **End-to-End Testing**: Complete user journey validation
- **Load Testing**: Performance under various conditions

### 8.2 Testing Tools
- **Encore Testing**: Built-in testing framework
- **Jest/Vitest**: Unit and integration testing
- **Supertest**: API endpoint testing
- **MongoDB Memory Server**: Database testing

---

## 9. DEPLOYMENT & INFRASTRUCTURE

### 9.1 Deployment Strategy
- **Environment Strategy**: Development, Staging, Production
- **CI/CD Pipeline**: Automated testing, building, and deployment
- **Container Strategy**: Docker containerization

### 9.2 Cloud Infrastructure
- **Application Hosting**: Encore Cloud or cloud provider of choice
- **Database Hosting**: MongoDB Atlas or self-managed MongoDB cluster
- **File Storage**: AWS S3 or similar for image storage
- **CDN**: CloudFlare for global content delivery

---

## 10. CONCLUSION

This PRD outlines a comprehensive food delivery ordering system built with Encore.ts and MongoDB. The system leverages Encore.ts microservices architecture for scalable backend development while using MongoDB for flexible data storage.

Key implementation notes:
- MongoDB integration follows Encore's external database connection patterns
- Encore.ts provides type-safe APIs, authentication, and built-in monitoring
- The phased approach ensures iterative delivery of value
- Architecture supports horizontal scaling and real-time features

The combination of Encore.ts and MongoDB provides a modern, scalable foundation for a comprehensive food delivery platform that can handle complex multi-sided marketplace requirements. 